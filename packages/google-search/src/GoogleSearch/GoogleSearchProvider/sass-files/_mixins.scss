@use "sass:math";

//===========================
// Mixins
//===========================
@mixin visually-hidden {
  clip: rect(0, 0, 0, 0);
  position: absolute !important;
  height: 1px;
  width: 1px;
  margin: -1px;
  overflow: hidden;
  border: 0;
}

// Convert a hex value to comma-delimited rgb values.
// We use this as a fallback to our color variables
// for things like RGBA opacity.
@function rgb-from-hex($hex) {
  @return red($hex), green($hex), blue($hex);
}

// Creates color-nittany-navy to color-pa-link gradient
// background with semi-transparent white diagonal lines
// over top seen in several components â€“ Quick Facts,
// Related Articles, etc.
@mixin blue-gradient-with-diagonals {
  background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.13' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E"), linear-gradient(to bottom right, var(--color-nittany-navy), var(--color-pa-link));
  //Direction of gradient changes between mobile and desktop
  @include breakpoint($bp-desktop) {
    background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.13' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E"), linear-gradient(to bottom left, var(--color-pa-link), var(--color-nittany-navy));
  }
}

// Styles shared between actual HTML buttons and link
// formatted to look like buttons.
@mixin gradient-button {
  --padding-y: 4px;

  @include title-small;
  font-style: italic;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 48px;
  padding: var(--padding-y) 44px;
  border: 2px solid var(--color-pa-link);
  transition: 1s background-image;
  background:
    linear-gradient(
      to bottom,
      transparent,
      transparent
    )
  ;
  color: var(--color-pa-link);
  cursor: pointer;

  &:hover,
  &:active,
  &:focus {
    color: white;
    background-image: $color-button-hover;
  }
}

@function milli-ems($milli-ems) {
  @return (0.001em * $milli-ems);
}

@mixin section-title($with-slashes: false) {
  @include title-small;
  margin-bottom: 32px;
  margin-top: 0;
  padding-left: var(--container-margin);
  text-transform: uppercase;

  @include breakpoint($bp-tablet) {
    padding-left: 0px;
  }

  @if $with-slashes {
    &::after {
      content: ' //';
    }
  }
}

@mixin blue-square-bullet($position-inside: false, $indent: 18px) {
  list-style-image: url('../../images/bullet-11px.svg');

  @if $position-inside {
    list-style-position: inside;
    padding-left: $indent;
    text-indent: -$indent;
  } @else {
    list-style-position: outside;
    text-indent: 0;
    padding-left: 0;
  }
}

@mixin carousel-button {
  position: absolute;
  height: 44px;
  width: 44px;
  display: none;
  border: 0;
  top: 45%; // To be overridden with React state; this is an approximation.
  background: transparent center center no-repeat;
  background-size: contain;
  cursor: pointer;
  opacity: 0.8;
  z-index: $zi-low;
  transform: translateY(-50%);
  text-indent: -9999px;
  overflow: hidden;

  @include breakpoint($bp-desktop) {
    display: block;
  }

  &:hover,
  &:focus,
  &:active {
    opacity: 1;
    border: 0;
  }
}

/// Sort a list of any SCSS values that can be compared with <, >, and == .
/// @author Sam Richards
/// @param {List} $list - list to sort
/// @return {List}

@function quick-sort($list) {
  $less:  ();
  $equal: ();
  $large: ();

  @if length($list) > 1 {
    $seed: nth($list, ceil(math.div(length($list), 2)));

    @each $item in $list {
      @if ($item == $seed) {
        $equal: append($equal, $item);
      } @else if ($item < $seed) {
        $less: append($less, $item);
      } @else if ($item > $seed) {
        $large: append($large, $item);
      }
    }

    @return join(join(quick-sort($less), $equal), quick-sort($large));
  }

  @return $list;
}

// Given an SCSS map `$var` of values keyed by breakpoints, return
// the correct value for the given `$breakpoint`.
@function get-responsive-value($var, $breakpoint) {
  // Sort the keys ascending, just in case they were improperly
  // ordered in the variable itself.
  $keys: quick-sort(map-keys($var));

  // Placeholder variable for the final value.
  $value: false;

  // Iterate through all the keys, updating `$value` to the value
  // in `$var` with the largest key that is not larger than `$breakpoint`.
  @each $key in $keys {
    @if($key <= $breakpoint) {
      $value: #{map-get($var, $key)};
    }
  }

  // If none of the `$var` values' keys were less than or equal to
  // `$breakpoint`, just return the first value.
  @if not $value {
    $value: #{map-get($var, list-nth($keys, 1))};
  }

  @return #{$value};
}

@mixin hide-text {
  text-indent: 100%;
  overflow: hidden;
  text-align: left;
  font-size: 0.1px;
}

@mixin header-heights {
  height: 85px;

  @include breakpoint($bp-tablet) {
    height: 90px;
  }

  @include breakpoint($bp-desktop) {
    height: 115px;
  }

  @include breakpoint($bp-desktop-lg) {
    height: 122px;
  }
}

@mixin header-heights-minimized {
  height: 57px;

  @include breakpoint($bp-tablet) {
    height: 62px;
  }

  @include breakpoint($bp-desktop) {
    height: 87px;
  }

  @include breakpoint($bp-desktop-lg) {
    height: 70px;
  }
}

@mixin mega-menu-align-left {
  .megaMenuItemContainer {
    left: 0;
    right: auto;
  }

  &::before {
    left: 40px;
    right: auto;
  }
}

@mixin mega-menu-align-right {
  .megaMenuItemContainer {
    left: auto;
    right: 0;
  }

  &::before {
    left: auto;
    right: 40px;
  }
}

@mixin last-updated {
  @include container;
  @include full-grid-mobile;
  @include body-xxsmall;
  grid-template-areas: 'content content content content';
  padding: 80px 0;
  font-weight: var(--font-weight-bold);
  text-transform: uppercase;

  @include breakpoint($bp-tablet) {
    @include full-grid-tablet;
    grid-template-areas: '. content content content content content content .';
    padding-bottom: 96px;
  }

  @include breakpoint($bp-desktop) {
    @include full-grid-desktop;
    grid-template-areas: '. content content content content content content content content content content .';
    padding-bottom: 120px;
  }

  @include breakpoint($bp-desktop-lg) {
    grid-template-areas: '. . content content content content content content content content . .';
  }

  .updated {
    grid-area: content;
  }
}
